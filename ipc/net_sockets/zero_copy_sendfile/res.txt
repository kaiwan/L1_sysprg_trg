Intention: transfer a 100MB file (from server to client), via both approaches and 
contrast the performance.

On an Ubuntu 10.10 x86-32 VmWare VM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$ cat /proc/version
Linux version 2.6.35-30-generic (buildd@rothera) (gcc version 4.4.5 (Ubuntu/Linaro 4.4.4-14ubuntu5) ) #54-Ubuntu SMP Tue Jun 7 18:40:23 UTC 2011
$ 

$ ls -lh /mnt/hgfs/trg/trg/test.dat
-rw-r--r-- 1 kaiwan kaiwan 100M 2011-07-28 12:01 /mnt/hgfs/trg/trg/test.dat
$ 
$ ./xfer_file
Usage:
./xfer_file -s -{t|m} [-v]                <--- as server
-OR-
./xfer_file file-to-send [-v]             <--- as client

 -s : run the program as the server
  -t : use the _t_raditional 'loop over read/write syscalls' approach
  -m : use the _m_odern 'single sendfile(2) syscall' approach
 If '-s' not present, it implies it's the client and you must pass a valid pathname as file to 'GET' from the server.
$ 


I With the MODERN (single sendfile syscall) approach:
-------------------------------------------------------------------------------

$ ./xfer_file -s -m -v &
[1] 2196
$ ./xfer_file: tcp socket created
./xfer_file: bind done at IP 127.0.0.1 port 7100
./xfer_file: listen q set up
./xfer_file: SIGCHLD handler set up
./xfer_file: pid 2196 blocking on accept()..

$ 
$ time ./xfer_file /mnt/hgfs/trg/trg/test.dat -v
./xfer_file: tcp socket created

Server ./xfer_file: client connected now from IP 127.0.0.1 port # 38697
svr: to send file "/mnt/hgfs/trg/trg/test.dat" to client...
svr: using MODERN sendfile(2) approach...
svr: # bytes sent    :        104857600
./xfer_file: pid 2196 blocking on accept()..
cli: # bytes received:        104857600

real	0m2.906s
user	0m0.000s
sys	0m1.380s
$ ll destfile.dat 
-rw-r--r-- 1 kaiwan kaiwan 104857600 2011-07-28 12:14 destfile.dat
$ 

II With the TRADITIONAL (loop over read/write syscalls) approach:
-------------------------------------------------------------------------------

$ rm destfile.dat
$ pkill xfer_file 
$ 
[1]+  Terminated              ./xfer_file -s -m -v
$ 
$ ./xfer_file -s -t -v &
[1] 2243
$ ./xfer_file: tcp socket created
./xfer_file: bind done at IP 127.0.0.1 port 7100
./xfer_file: listen q set up
./xfer_file: SIGCHLD handler set up
./xfer_file: pid 2243 blocking on accept()..

$ time ./xfer_file /mnt/hgfs/trg/trg/test.dat -v
./xfer_file: tcp socket created

Server ./xfer_file: client connected now from IP 127.0.0.1 port # 39280
svr: to send file "/mnt/hgfs/trg/trg/test.dat" to client...
svr: using TRADITIONAL read/write loop approach...
svr: # bytes sent    :        104857600
./xfer_file: pid 2243 blocking on accept()..
cli: # bytes received:        104857600

real	0m4.153s
user	0m0.008s
sys	0m1.424s
$ 
$ ls -ll destfile.dat 
-rw-r--r-- 1 kaiwan kaiwan 104857600 2011-07-28 12:16 destfile.dat
$ 

-------------------------------------------------------------------------------

This simple test shows an approximate 43% improvement in IO when using the modern
sendfile(2) syscall over the traditional "loop over read/write syscalls" approach!


(Careful of Linux OS page caching effect.; better to use a randomly generated 100MB
test file on each test iteration. (Can clear the page cache..)).
-------------------------------------------------------------------------------

Across a (pseudo) network:
-----------------------------
II Server on VM guest, client on 64-bit host:

1. Traditional:

time ./xfer_file /home/kaiwan/hgfs/trg/trg/test.dat -v 
./xfer_file: tcp socket created
cli: # bytes received:        104857600

real	0m3.447s
user	0m0.020s
sys	0m0.600s

2. Modern:

time ./xfer_file /home/kaiwan/hgfs/trg/trg/test.dat -v 
./xfer_file: tcp socket created
cli: # bytes received:        104857600

real	0m1.572s
user	0m0.010s
sys	0m0.660s

Over 45% improvement...


